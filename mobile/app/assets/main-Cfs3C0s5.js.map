{"version":3,"file":"main-Cfs3C0s5.js","sources":["../../src/utils/constants.ts","../../src/utils/dom.ts","../../src/services/ApiService.ts","../../src/services/WebRTCService.ts","../../src/services/AudioService.ts","../../src/services/SessionManager.ts","../../src/components/UIController.ts","../../src/components/MicButtonController.ts","../../src/components/App.ts","../../src/services/StateManager.ts","../../src/main.ts"],"sourcesContent":["// API Configuration\nexport const API_ENDPOINTS = {\n  WP_USER_ME: '/wp-json/wp/v2/users/me',\n  REALTIME_SESSION: '/wp-json/ai-commander/v1/realtime/session',\n  REALTIME_TOOL: '/wp-json/ai-commander/v1/realtime/tool',\n  READ_TEXT: '/wp-json/ai-commander/v1/read-text',\n} as const;\n\nexport const OPENAI_API = {\n  REALTIME_URL: 'https://api.openai.com/v1/realtime',\n  DEFAULT_MODEL: 'gpt-4o-realtime-preview-2025-06-03',\n} as const;\n\n// Audio Configuration\nexport const AUDIO_CONFIG = {\n  SAMPLE_RATE: 48000,\n  CHANNEL_COUNT: 1,\n  SAMPLE_SIZE: 16,\n  ECHO_CANCELLATION: false,\n  NOISE_SUPPRESSION: false,\n  AUTO_GAIN_CONTROL: false,\n  MAX_BITRATE: 96000,\n} as const;\n\n// UI Configuration\nexport const UI_CONFIG = {\n  ERROR_DISPLAY_DURATION: 5000,\n  MOBILE_AUDIO_CHECK_INTERVAL: 100,\n  SCROLL_BEHAVIOR: 'smooth' as const,\n} as const;\n\n// Storage Keys\nexport const STORAGE_KEYS = {\n  SITE_URL: 'aicommander_site_url',\n  USERNAME: 'aicommander_username',\n  APP_PASSWORD: 'aicommander_app_password',\n} as const;\n\n// Translations interface\ninterface Translations {\n  status: Record<string, string>;\n  errors: Record<string, string>;\n  ui: Record<string, string>;\n}\n\n// Default translations (English)\nconst defaultTranslations: Translations = {\n  status: {\n    disconnected: 'Press to start',\n    connecting: 'Connecting...',\n    recording: 'Listening...',\n    processing: 'Processing...',\n    speaking: 'Responding...',\n    speaking_interruptible: 'Press to interrupt',\n    tool_wait: 'Executing command...',\n    idle: 'Waiting...',\n    error: 'Error',\n  },\n  errors: {\n    invalid_url: 'Invalid URL. Enter a complete URL (e.g. https://www.yourshop.com)',\n    invalid_credentials: 'Invalid credentials. Check username and password.',\n    access_denied: 'Access denied. Check user permissions on the site.',\n    connection_failed: 'Unable to connect to WordPress site',\n    session_failed: 'Unable to start session',\n    tool_execution_failed: 'Tool execution failed',\n    network_error: 'Network error',\n    data_channel_not_open: 'Data channel not open',\n    tts_failed: 'Error in custom audio playback.',\n    communication_error: 'Communication error',\n    unknown_error: 'Unknown error',\n    url_must_start_with_http: 'URL must start with http:// or https://',\n    connection_generic: 'Unable to connect. Check your data and try again.',\n  },\n  ui: {\n    // Page titles and headers\n    page_title: 'AI Commander Voice Assistant',\n    config_title: 'AI Commander Voice Assistant',\n    config_subtitle: 'Enter your WordPress site URL and credentials',\n\n    // Configuration form\n    note_label: 'Note:',\n    note_text:\n      'For the password, use an \"Application Password\" generated from your WordPress profile, not your regular password.',\n    how_to_generate_link: 'How to generate an app password ‚Üí',\n\n    // Form labels and placeholders\n    site_url_label: 'Site URL',\n    site_url_placeholder: 'https://www.yourshop.com',\n    site_url_hint: 'The complete URL of your WordPress INofficina site',\n    username_label: 'Username',\n    username_placeholder: 'john.doe',\n    username_hint: 'Your WordPress username',\n    app_password_label: 'App password',\n    app_password_hint:\n      'The application password generated in WordPress (not your regular password)',\n\n    // Buttons\n    connect_button: 'Connect',\n    connecting_button: 'Connecting...',\n\n    // Main interface\n    office_name: 'INofficina.it Assistant',\n    change_config: 'Change configuration',\n    disconnect: 'Disconnect',\n\n    // Chat interface\n    greeting_title: 'Hello! üëã',\n    greeting_text:\n      \"I'm the INofficina.it voice assistant. I can help you manage your workshop appointments.\",\n\n    // Suggestions\n    suggestion_1: 'üí¨ \"Is license plate XX333TT our customer?\"',\n    suggestion_2: 'üìÖ \"Schedule maintenance for tomorrow\"',\n    suggestion_3: 'üîç \"Show today\\'s appointments\"',\n\n    // Confirmation dialogs\n    disconnect_confirm: 'Do you want to disconnect and delete saved credentials?',\n  },\n};\n\n// Current translations (mutable)\nlet currentTranslations: Translations = { ...defaultTranslations };\n\n// Function to update translations\nexport function setTranslations(translations: Translations): void {\n  currentTranslations = translations;\n}\n\n// Export translation getters\nexport const STATUS_MESSAGES = new Proxy({} as Record<string, string>, {\n  get(_, prop: string) {\n    return currentTranslations.status[prop] || defaultTranslations.status[prop] || prop;\n  },\n});\n\nexport const ERROR_MESSAGES = new Proxy({} as Record<string, string>, {\n  get(_, prop: string) {\n    const key = prop.toLowerCase();\n    return currentTranslations.errors[key] || defaultTranslations.errors[key] || prop;\n  },\n});\n\nexport const UI_TEXT = new Proxy({} as Record<string, string>, {\n  get(_, prop: string) {\n    const key = prop.toLowerCase();\n    return currentTranslations.ui[key] || defaultTranslations.ui[key] || prop;\n  },\n});\n","import { UIElements } from '@/types';\nimport { UI_TEXT, STATUS_MESSAGES } from '@/utils/constants';\n\nexport function initializeElements(): UIElements {\n  return {\n    configScreen: document.getElementById('configScreen') as HTMLElement,\n    mainApp: document.getElementById('mainApp') as HTMLElement,\n    configForm: document.getElementById('configForm') as HTMLFormElement,\n    siteUrlInput: document.getElementById('siteUrl') as HTMLInputElement,\n    usernameInput: document.getElementById('username') as HTMLInputElement,\n    appPasswordInput: document.getElementById('appPassword') as HTMLInputElement,\n    configError: document.getElementById('configError') as HTMLElement,\n    connectBtn: document.getElementById('connectBtn') as HTMLButtonElement,\n    settingsBtn: document.getElementById('settingsBtn') as HTMLButtonElement,\n    settingsMenu: document.getElementById('settingsMenu') as HTMLElement,\n    changeConfigBtn: document.getElementById('changeConfigBtn') as HTMLElement,\n    logoutBtn: document.getElementById('logoutBtn') as HTMLElement,\n    micButton: document.getElementById('micButton') as HTMLButtonElement,\n    statusText: document.getElementById('statusText') as HTMLElement,\n    chatContainer: document.getElementById('chatContainer') as HTMLElement,\n    emptyState: document.getElementById('emptyState') as HTMLElement,\n    remoteAudio: document.getElementById('remoteAudio') as HTMLAudioElement,\n    loadingOverlay: document.getElementById('loadingOverlay') as HTMLElement,\n  };\n}\n\nexport function updateUIWithTranslations(): void {\n  // Update page title\n  document.title = UI_TEXT.page_title;\n\n  // Update configuration screen\n  const configTitle = document.querySelector('.config-title');\n  if (configTitle) configTitle.textContent = UI_TEXT.config_title;\n\n  const configSubtitle = document.querySelector('.config-subtitle');\n  if (configSubtitle) configSubtitle.textContent = UI_TEXT.config_subtitle;\n\n  // Update note section\n  const noteSection = document.querySelector('div[style*=\"background: #f7fafc\"]');\n  if (noteSection) {\n    noteSection.innerHTML = `<strong>${UI_TEXT.note_label}</strong> ${UI_TEXT.note_text}\n      <a href=\"https://wordpress.org/documentation/article/application-passwords/\" target=\"_blank\" style=\"color: #667eea; text-decoration: underline;\">${UI_TEXT.how_to_generate_link}</a>`;\n  }\n\n  // Update form labels\n  const siteUrlLabel = document.querySelector('label[for=\"siteUrl\"]');\n  if (siteUrlLabel) siteUrlLabel.textContent = UI_TEXT.site_url_label;\n\n  const siteUrlInput = document.getElementById('siteUrl') as HTMLInputElement;\n  if (siteUrlInput) siteUrlInput.placeholder = UI_TEXT.site_url_placeholder;\n\n  const siteUrlHint = siteUrlLabel?.parentElement?.querySelector('.form-hint');\n  if (siteUrlHint) siteUrlHint.textContent = UI_TEXT.site_url_hint;\n\n  const usernameLabel = document.querySelector('label[for=\"username\"]');\n  if (usernameLabel) usernameLabel.textContent = UI_TEXT.username_label;\n\n  const usernameInput = document.getElementById('username') as HTMLInputElement;\n  if (usernameInput) usernameInput.placeholder = UI_TEXT.username_placeholder;\n\n  const usernameHint = usernameLabel?.parentElement?.querySelector('.form-hint');\n  if (usernameHint) usernameHint.textContent = UI_TEXT.username_hint;\n\n  const appPasswordLabel = document.querySelector('label[for=\"appPassword\"]');\n  if (appPasswordLabel) appPasswordLabel.textContent = UI_TEXT.app_password_label;\n\n  const appPasswordHint = appPasswordLabel?.parentElement?.querySelector('.form-hint');\n  if (appPasswordHint) appPasswordHint.textContent = UI_TEXT.app_password_hint;\n\n  // Update connect button\n  const connectBtn = document.getElementById('connectBtn') as HTMLButtonElement | null;\n  if (connectBtn && !connectBtn.disabled) {\n    connectBtn.textContent = UI_TEXT.connect_button;\n  }\n\n  // Update main interface\n  const officeName = document.getElementById('officeName');\n  if (officeName) officeName.textContent = UI_TEXT.office_name;\n\n  // Update settings menu\n  const changeConfigSpan = document.querySelector('#changeConfigBtn span');\n  if (changeConfigSpan) changeConfigSpan.textContent = UI_TEXT.change_config;\n\n  const disconnectSpan = document.querySelector('#logoutBtn span');\n  if (disconnectSpan) disconnectSpan.textContent = UI_TEXT.disconnect;\n\n  // Update chat interface\n  const greetingTitle = document.querySelector('#emptyState h2');\n  if (greetingTitle) greetingTitle.textContent = UI_TEXT.greeting_title;\n\n  const greetingText = document.querySelector('#emptyState p');\n  if (greetingText) greetingText.textContent = UI_TEXT.greeting_text;\n\n  // Update suggestions\n  const suggestions = document.querySelectorAll('.suggestion');\n  if (suggestions.length >= 3) {\n    suggestions[0].textContent = UI_TEXT.suggestion_1;\n    suggestions[1].textContent = UI_TEXT.suggestion_2;\n    suggestions[2].textContent = UI_TEXT.suggestion_3;\n  }\n\n  // Update status text\n  const statusText = document.getElementById('statusText');\n  if (statusText && statusText.textContent === 'Premi per iniziare') {\n    statusText.textContent = STATUS_MESSAGES.disconnected;\n  }\n}\n","import { API_ENDPOINTS, ERROR_MESSAGES, setTranslations } from '@/utils/constants';\nimport { updateUIWithTranslations } from '@/utils/dom';\nimport { SessionResponse, ToolExecutionRequest, ToolExecutionResponse } from '@/types';\n\nexport class ApiService {\n  constructor(\n    private siteUrl: string,\n    private bearerToken: string\n  ) {}\n\n  async testConnection(): Promise<void> {\n    const response = await fetch(`${this.siteUrl}${API_ENDPOINTS.WP_USER_ME}`, {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'omit',\n      headers: {\n        Authorization: `Basic ${this.bearerToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error(ERROR_MESSAGES.INVALID_CREDENTIALS);\n      } else if (response.status === 403) {\n        // In multisite, status 403 might be normal\n        try {\n          const userData = await response.json();\n          if (userData && userData.id && userData.name) {\n            console.log('Authentication successful despite 403 status');\n          } else {\n            throw new Error(ERROR_MESSAGES.ACCESS_DENIED);\n          }\n        } catch (jsonError) {\n          throw new Error(ERROR_MESSAGES.ACCESS_DENIED);\n        }\n      } else {\n        throw new Error(ERROR_MESSAGES.CONNECTION_FAILED);\n      }\n    }\n  }\n\n  async createSession(): Promise<SessionResponse> {\n    const response = await fetch(`${this.siteUrl}${API_ENDPOINTS.REALTIME_SESSION}`, {\n      method: 'POST',\n      credentials: 'omit',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${this.bearerToken}`,\n      },\n      body: JSON.stringify({}),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`${ERROR_MESSAGES.SESSION_FAILED}: ${error}`);\n    }\n\n    const sessionData = await response.json();\n    if (!sessionData.client_secret?.value) {\n      throw new Error('Invalid session response');\n    }\n\n    return sessionData;\n  }\n\n  async executeTool(request: ToolExecutionRequest): Promise<ToolExecutionResponse> {\n    const response = await fetch(`${this.siteUrl}${API_ENDPOINTS.REALTIME_TOOL}`, {\n      method: 'POST',\n      credentials: 'omit',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${this.bearerToken}`,\n      },\n      body: JSON.stringify(request),\n    });\n\n    const result = await response.json();\n    return result;\n  }\n\n  async getTextToSpeech(text: string, signal?: AbortSignal): Promise<Blob> {\n    const response = await fetch(`${this.siteUrl}${API_ENDPOINTS.READ_TEXT}`, {\n      method: 'POST',\n      credentials: 'omit',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${this.bearerToken}`,\n      },\n      body: JSON.stringify({ text }),\n      signal: signal,\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS request failed with status ${response.status}`);\n    }\n\n    return await response.blob();\n  }\n\n  static generateBearerToken(username: string, appPassword: string): string {\n    const credentials = `${username}:${appPassword}`;\n    return btoa(credentials);\n  }\n\n  async fetchTranslations(): Promise<void> {\n    try {\n      const response = await fetch(`${this.siteUrl}/wp-json/ai-commander/v1/translations`, {\n        method: 'GET',\n        credentials: 'omit',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const translations = await response.json();\n        setTranslations(translations);\n        updateUIWithTranslations();\n      } else {\n        console.warn('Failed to fetch translations, using defaults');\n      }\n    } catch (error) {\n      console.warn('Error fetching translations, using defaults:', error);\n    }\n  }\n}\n","import { OPENAI_API, AUDIO_CONFIG } from '@/utils/constants';\nimport { RealtimeEvent } from '@/types';\n\nexport interface WebRTCCallbacks {\n  onDataChannelOpen?: () => void;\n  onDataChannelMessage?: (event: MessageEvent) => void;\n  onDataChannelError?: (error: Event) => void;\n  onTrack?: (event: RTCTrackEvent) => void;\n}\n\nexport class WebRTCService {\n  private peerConnection: RTCPeerConnection | null = null;\n  private dataChannel: RTCDataChannel | null = null;\n  private localStream: MediaStream | null = null;\n\n  async startSession(\n    sessionToken: string,\n    model: string = OPENAI_API.DEFAULT_MODEL,\n    callbacks: WebRTCCallbacks = {}\n  ): Promise<void> {\n    // Create RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection();\n\n    // Setup remote audio handler\n    if (callbacks.onTrack) {\n      this.peerConnection.ontrack = callbacks.onTrack;\n    }\n\n    // Increase bitrate to 96kb/s\n    this.peerConnection.getTransceivers().forEach((t) => {\n      if (t.sender.track?.kind === 'audio') {\n        const params = t.sender.getParameters();\n        params.encodings = [{ maxBitrate: AUDIO_CONFIG.MAX_BITRATE }];\n        t.sender.setParameters(params);\n      }\n    });\n\n    // Get user media\n    this.localStream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        sampleRate: AUDIO_CONFIG.SAMPLE_RATE,\n        channelCount: AUDIO_CONFIG.CHANNEL_COUNT,\n        sampleSize: AUDIO_CONFIG.SAMPLE_SIZE,\n        echoCancellation: AUDIO_CONFIG.ECHO_CANCELLATION,\n        noiseSuppression: AUDIO_CONFIG.NOISE_SUPPRESSION,\n        autoGainControl: AUDIO_CONFIG.AUTO_GAIN_CONTROL,\n      },\n    });\n\n    // Add tracks to peer connection\n    this.localStream.getTracks().forEach((track) => {\n      this.peerConnection!.addTrack(track, this.localStream!);\n    });\n\n    // Create data channel\n    this.dataChannel = this.peerConnection.createDataChannel('oai-events', {\n      ordered: true,\n    });\n\n    if (callbacks.onDataChannelOpen) {\n      this.dataChannel.onopen = callbacks.onDataChannelOpen;\n    }\n\n    if (callbacks.onDataChannelMessage) {\n      this.dataChannel.onmessage = callbacks.onDataChannelMessage;\n    }\n\n    if (callbacks.onDataChannelError) {\n      this.dataChannel.onerror = callbacks.onDataChannelError;\n    }\n\n    // SDP negotiation\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(offer);\n\n    const sdpResponse = await fetch(`${OPENAI_API.REALTIME_URL}?model=${model}`, {\n      method: 'POST',\n      body: offer.sdp,\n      headers: {\n        Authorization: `Bearer ${sessionToken}`,\n        'Content-Type': 'application/sdp',\n      },\n    });\n\n    if (!sdpResponse.ok) {\n      throw new Error(`SDP negotiation failed: ${sdpResponse.status}`);\n    }\n\n    const answerSdp = await sdpResponse.text();\n    await this.peerConnection.setRemoteDescription({\n      type: 'answer',\n      sdp: answerSdp,\n    });\n  }\n\n  sendEvent(event: RealtimeEvent): void {\n    if (!this.dataChannel || this.dataChannel.readyState !== 'open') {\n      throw new Error('Data channel not open');\n    }\n    this.dataChannel.send(JSON.stringify(event));\n  }\n\n  muteMicrophone(): void {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach((track) => {\n        track.enabled = false;\n      });\n    }\n  }\n\n  unmuteMicrophone(): void {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach((track) => {\n        track.enabled = true;\n      });\n    }\n  }\n\n  updateTurnDetection(mode: 'server_vad' | 'none'): void {\n    console.log(`[WebRTCService] updateTurnDetection called with mode:`, mode);\n    const event: RealtimeEvent = {\n      type: 'session.update',\n      session: {\n        turn_detection:\n          mode === 'server_vad'\n            ? {\n                type: 'server_vad',\n                threshold: 0.5,\n                prefix_padding_ms: 300,\n                silence_duration_ms: 200,\n              }\n            : null,\n      },\n    };\n    console.log('[WebRTCService] Sending session.update event:', event);\n    this.sendEvent(event);\n  }\n\n  closeSession(): void {\n    if (this.localStream) {\n      this.localStream.getTracks().forEach((track) => track.stop());\n      this.localStream = null;\n    }\n    if (this.dataChannel) {\n      this.dataChannel.close();\n      this.dataChannel = null;\n    }\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n  }\n}\n","import { ERROR_MESSAGES } from '@/utils/constants';\nimport { ApiService } from './ApiService';\n\nexport class AudioService {\n  private isMobileAudioUnlocked = false;\n  private globalAudioContext: AudioContext | null = null;\n  private isPlayingCustomTts = false;\n  private currentAudioElement: HTMLAudioElement | null = null;\n  private currentAbortController: AbortController | null = null;\n\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Unlocks mobile audio playback by resuming AudioContext and performing\n   * a muted play/pause cycle on the audio element\n   */\n  unlockMobileAudio(audioElement: HTMLAudioElement): void {\n    if (this.isMobileAudioUnlocked) return;\n    this.isMobileAudioUnlocked = true;\n\n    // Ensure an AudioContext is running\n    try {\n      this.globalAudioContext =\n        this.globalAudioContext ||\n        new (window.AudioContext ||\n          (window as unknown as { webkitAudioContext: typeof AudioContext }).webkitAudioContext)();\n      if (this.globalAudioContext.state === 'suspended') {\n        this.globalAudioContext.resume();\n      }\n    } catch (error) {\n      console.warn('AudioContext initialisation failed:', error);\n    }\n\n    // Perform a muted play/pause cycle to satisfy autoplay policies\n    if (audioElement) {\n      const wasMuted = audioElement.muted;\n      audioElement.muted = true;\n\n      const playPromise = audioElement.play();\n      if (playPromise && typeof playPromise.then === 'function') {\n        playPromise\n          .then(() => {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            audioElement.muted = wasMuted;\n            console.log('[AI-Commander] Mobile audio unlocked');\n          })\n          .catch((err) => {\n            console.warn('Mobile audio unlock play() rejected:', err);\n            audioElement.muted = wasMuted;\n          });\n      } else {\n        audioElement.muted = wasMuted;\n      }\n    }\n  }\n\n  /**\n   * Plays custom TTS audio from the WordPress endpoint\n   */\n  async playCustomTtsAudio(\n    text: string,\n    audioElement: HTMLAudioElement,\n    onStart?: () => void,\n    onEnd?: () => void\n  ): Promise<void> {\n    if (!text) {\n      console.log('[AudioService] No text provided for TTS');\n      return;\n    }\n\n    console.log('[AudioService] Playing custom TTS for:', text);\n\n    try {\n      this.isPlayingCustomTts = true;\n      this.currentAudioElement = audioElement;\n\n      if (onStart) onStart();\n\n      console.log('[AudioService] Fetching TTS audio from API...');\n      \n      // Create a new AbortController for this request\n      this.currentAbortController = new AbortController();\n      \n      const audioBlob = await this.apiService.getTextToSpeech(text, this.currentAbortController.signal);\n      console.log('[AudioService] Received audio blob, size:', audioBlob.size);\n\n      // Check if playback was interrupted\n      if (!this.isPlayingCustomTts || !audioElement) {\n        return;\n      }\n\n      // Prepare audio element for playback\n      if (audioElement.dataset.objectUrl) {\n        URL.revokeObjectURL(audioElement.dataset.objectUrl);\n        delete audioElement.dataset.objectUrl;\n      }\n\n      audioElement.srcObject = null;\n      const objectUrl = URL.createObjectURL(audioBlob);\n      audioElement.dataset.objectUrl = objectUrl;\n      audioElement.src = objectUrl;\n\n      await audioElement.play();\n\n      // Wait for playback to finish\n      await new Promise<void>((resolve, reject) => {\n        const checkInterrupted = () => {\n          if (!this.isPlayingCustomTts) {\n            audioElement.pause();\n            resolve();\n          }\n        };\n\n        audioElement.onended = () => resolve();\n        audioElement.onerror = () => reject(new Error('Audio playback error'));\n\n        // Check periodically if playback was interrupted\n        const intervalId = setInterval(() => {\n          checkInterrupted();\n          if (!this.isPlayingCustomTts) {\n            clearInterval(intervalId);\n          }\n        }, 100);\n\n        // Clean up interval when promise resolves\n        const originalResolve = resolve;\n        resolve = () => {\n          clearInterval(intervalId);\n          originalResolve();\n        };\n      });\n\n      // Clean up\n      URL.revokeObjectURL(objectUrl);\n      delete audioElement.dataset.objectUrl;\n    } catch (err) {\n      // Don't throw error if it was aborted\n      if (err instanceof Error && err.name === 'AbortError') {\n        console.log('[AudioService] TTS request was aborted');\n      } else {\n        console.error('Error during custom TTS playback:', err);\n        throw new Error(ERROR_MESSAGES.TTS_FAILED);\n      }\n    } finally {\n      this.currentAbortController = null;\n      this.isPlayingCustomTts = false;\n      this.currentAudioElement = null;\n      if (onEnd) onEnd();\n    }\n  }\n\n  /**\n   * Interrupts ongoing custom TTS playback\n   */\n  interruptCustomTts(): void {\n    // Abort any pending TTS request\n    if (this.currentAbortController) {\n      this.currentAbortController.abort();\n      this.currentAbortController = null;\n      console.log('[AudioService] Aborted TTS request');\n    }\n\n    if (this.isPlayingCustomTts && this.currentAudioElement) {\n      this.isPlayingCustomTts = false;\n      this.currentAudioElement.pause();\n      this.currentAudioElement.currentTime = 0;\n\n      if (this.currentAudioElement.dataset.objectUrl) {\n        URL.revokeObjectURL(this.currentAudioElement.dataset.objectUrl);\n        delete this.currentAudioElement.dataset.objectUrl;\n      }\n\n      console.log('Custom TTS interrupted by user');\n    }\n  }\n\n  /**\n   * Cleans up audio resources\n   */\n  cleanup(audioElement: HTMLAudioElement): void {\n    this.interruptCustomTts();\n\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      audioElement.srcObject = null;\n      audioElement.src = '';\n\n      if (audioElement.dataset.objectUrl) {\n        URL.revokeObjectURL(audioElement.dataset.objectUrl);\n        delete audioElement.dataset.objectUrl;\n      }\n\n      audioElement.onended = null;\n    }\n  }\n\n  get isPlayingTts(): boolean {\n    return this.isPlayingCustomTts;\n  }\n}\n","import { StateManager } from './StateManager';\nimport { ApiService } from './ApiService';\nimport { WebRTCService } from './WebRTCService';\nimport { AudioService } from './AudioService';\nimport {\n  RealtimeEvent,\n  ToolCall,\n  ResponseDoneEvent,\n  TranscriptionEvent,\n  DeltaEvent,\n  ErrorEvent,\n} from '@/types';\nimport { ERROR_MESSAGES } from '@/utils/constants';\n\nexport class SessionManager {\n  private webrtcService: WebRTCService;\n  private audioService: AudioService;\n\n  constructor(\n    private stateManager: StateManager,\n    private apiService: ApiService,\n    private audioElement: HTMLAudioElement\n  ) {\n    this.webrtcService = new WebRTCService();\n    this.audioService = new AudioService(apiService);\n  }\n\n  async startSession(): Promise<void> {\n    try {\n      // Batch state updates to avoid multiple notifications\n      this.stateManager.setState({\n        status: 'connecting',\n        messages: [],\n        toolCallQueue: [],\n        currentToolCallId: null,\n      });\n\n      // Get session token from WordPress\n      const sessionData = await this.apiService.createSession();\n      this.stateManager.setSessionData(\n        sessionData.client_secret.value,\n        sessionData.modalities || ['text', 'audio']\n      );\n\n      console.log('Session modalities:', sessionData.modalities);\n      console.log('Custom TTS enabled:', !sessionData.modalities?.includes('audio'));\n\n      // Start WebRTC session\n      await this.webrtcService.startSession(sessionData.client_secret.value, sessionData.model, {\n        onDataChannelOpen: () => {\n          this.stateManager.updateStatus('recording');\n        },\n        onDataChannelMessage: (event) => this.handleServerEvent(event),\n        onDataChannelError: (error) => {\n          console.error('Data channel error:', error);\n          this.handleError(ERROR_MESSAGES.COMMUNICATION_ERROR);\n        },\n        onTrack: (event) => {\n          if (this.audioElement && event.streams && event.streams[0]) {\n            this.audioElement.srcObject = event.streams[0];\n            this.audioElement.play().catch((e) => console.error('Audio play error:', e));\n          }\n        },\n      });\n    } catch (error) {\n      console.error('Session start error:', error);\n      this.handleError((error as Error).message || ERROR_MESSAGES.SESSION_FAILED);\n      this.stopSession();\n    }\n  }\n\n  stopSession(): void {\n    // Interrupt any ongoing custom TTS playback\n    if (this.stateManager.getState().isPlayingCustomTts) {\n      this.audioService.interruptCustomTts();\n    }\n\n    this.webrtcService.closeSession();\n    this.audioService.cleanup(this.audioElement);\n    this.stateManager.updateStatus('disconnected');\n    this.stateManager.updateTranscript('');\n  }\n\n  setVadEnabled(enabled: boolean): void {\n    console.log(`[SessionManager] setVadEnabled called with:`, enabled);\n    try {\n      this.webrtcService.updateTurnDetection(enabled ? 'server_vad' : 'none');\n      console.log(`[SessionManager] VAD ${enabled ? 'enabled' : 'disabled'} - session update sent`);\n      \n      // When re-enabling VAD after press-to-talk, commit the audio buffer and create response\n      if (enabled) {\n        console.log('[SessionManager] Committing audio buffer after press-to-talk');\n        this.webrtcService.sendEvent({\n          type: 'input_audio_buffer.commit'\n        });\n        \n        // Create a response after committing the buffer\n        console.log('[SessionManager] Creating response after press-to-talk');\n        this.webrtcService.sendEvent({\n          type: 'response.create'\n        });\n      }\n    } catch (error) {\n      console.error('[SessionManager] Failed to update VAD:', error);\n    }\n  }\n\n  private async handleServerEvent(event: MessageEvent): Promise<void> {\n    try {\n      const data: RealtimeEvent = JSON.parse(event.data);\n      console.log('Server event:', data.type, data);\n\n      const state = this.stateManager.getState();\n\n      switch (data.type) {\n        case 'input_audio_buffer.speech_started':\n          this.webrtcService.unmuteMicrophone();\n          this.stateManager.updateStatus('recording');\n          break;\n\n        case 'input_audio_buffer.speech_stopped':\n          this.stateManager.updateStatus('processing');\n          break;\n\n        case 'conversation.item.input_audio_transcription.completed':\n          this.stateManager.addMessage({\n            type: 'user',\n            content: (data as TranscriptionEvent).transcript,\n          });\n          break;\n\n        case 'response.created':\n          this.stateManager.updateTranscript('');\n          break;\n\n        case 'response.audio_transcript.delta':\n        case 'response.text.delta':\n          this.stateManager.appendTranscript((data as DeltaEvent).delta || '');\n          break;\n\n        case 'response.audio.delta':\n          if (!state.isCustomTtsEnabled) {\n            this.stateManager.updateStatus('speaking');\n          }\n          break;\n\n        case 'response.function_call_arguments.delta':\n          // Only update to tool_wait if not already in that state\n          if (state.status !== 'tool_wait') {\n            this.stateManager.updateStatus('tool_wait');\n          }\n          break;\n\n        case 'response.done':\n          await this.handleResponseDone(data as ResponseDoneEvent);\n          break;\n\n        case 'output_audio_buffer.stopped':\n          if (!state.isCustomTtsEnabled) {\n            this.stateManager.updateStatus('idle');\n          }\n          break;\n\n        case 'error':\n          console.error('API Error:', data);\n          this.handleError((data as ErrorEvent).message || ERROR_MESSAGES.UNKNOWN_ERROR);\n          break;\n      }\n    } catch (error) {\n      console.error('Error parsing server event:', error);\n    }\n  }\n\n  private async handleResponseDone(data: ResponseDoneEvent): Promise<void> {\n    // Clear typing indicator\n    this.stateManager.updateTranscript('');\n\n    if (data.response.status === 'failed') {\n      this.stateManager.updateStatus('error');\n      return;\n    }\n\n    const responseOutput = data.response?.output?.[0]?.content?.[0];\n    const responseText = responseOutput?.text || responseOutput?.transcript;\n\n    if (responseText) {\n      this.stateManager.addMessage({ type: 'assistant', content: responseText });\n    }\n\n    // If custom TTS is enabled, synthesize and play audio now\n    const state = this.stateManager.getState();\n    if (state.isCustomTtsEnabled && responseText) {\n      await this.playCustomTts(responseText);\n    }\n\n    // Handle function calls\n    if (data.response.output) {\n      data.response.output.forEach((outputItem) => {\n        if (\n          outputItem.type === 'function_call' &&\n          outputItem.call_id &&\n          outputItem.name &&\n          outputItem.arguments\n        ) {\n          this.stateManager.queueToolCall({\n            name: outputItem.name,\n            arguments: outputItem.arguments,\n            call_id: outputItem.call_id,\n          });\n        }\n      });\n    }\n\n    // Process tool calls if any\n    const toolCall = this.stateManager.dequeueToolCall();\n    if (toolCall) {\n      await this.processToolCall(toolCall);\n    }\n  }\n\n  private async playCustomTts(text: string): Promise<void> {\n    console.log('[SessionManager] Starting custom TTS for text:', text);\n    try {\n      await this.audioService.playCustomTtsAudio(\n        text,\n        this.audioElement,\n        () => {\n          console.log('[SessionManager] Custom TTS started');\n          this.stateManager.setPlayingCustomTts(true);\n          this.stateManager.updateStatus('speaking');\n          this.webrtcService.muteMicrophone();\n        },\n        () => {\n          console.log('[SessionManager] Custom TTS ended');\n          const state = this.stateManager.getState();\n          if (state.status !== 'disconnected') {\n            this.stateManager.setPlayingCustomTts(false);\n            this.webrtcService.unmuteMicrophone();\n            this.stateManager.updateStatus('recording');\n          }\n        }\n      );\n    } catch (error) {\n      console.error('Custom TTS error:', error);\n      if (this.stateManager.getState().status !== 'disconnected') {\n        this.handleError(ERROR_MESSAGES.TTS_FAILED);\n      }\n    }\n  }\n\n  private async processToolCall(toolCall: ToolCall): Promise<void> {\n    // Status is already set to 'tool_wait' when receiving function_call_arguments.delta\n    try {\n      const result = await this.apiService.executeTool({\n        tool_name: toolCall.name,\n        arguments: toolCall.arguments,\n      });\n\n      if (!result.error) {\n        this.sendFunctionResult(toolCall.call_id, result);\n      } else {\n        this.sendFunctionResult(toolCall.call_id, {\n          error: true,\n          message: result.message || ERROR_MESSAGES.TOOL_EXECUTION_FAILED,\n        });\n      }\n    } catch (error) {\n      this.sendFunctionResult(toolCall.call_id, {\n        error: true,\n        message: ERROR_MESSAGES.NETWORK_ERROR,\n      });\n    }\n\n    // Process next tool call if any\n    const nextToolCall = this.stateManager.dequeueToolCall();\n    if (nextToolCall) {\n      await this.processToolCall(nextToolCall);\n    }\n  }\n\n  private sendFunctionResult(callId: string, result: unknown): void {\n    try {\n      // Send function result\n      this.webrtcService.sendEvent({\n        type: 'conversation.item.create',\n        item: {\n          type: 'function_call_output',\n          call_id: callId,\n          output: JSON.stringify(result),\n        },\n      });\n\n      // Request response\n      this.webrtcService.sendEvent({\n        type: 'response.create',\n      });\n    } catch (error) {\n      this.handleError(ERROR_MESSAGES.DATA_CHANNEL_NOT_OPEN);\n    }\n  }\n\n  interruptTts(): void {\n    if (this.stateManager.getState().isPlayingCustomTts) {\n      this.audioService.interruptCustomTts();\n    } else {\n      this.stopSession();\n    }\n  }\n\n  private handleError(message: string): void {\n    console.error('Error:', message);\n    this.stateManager.updateStatus('error');\n  }\n}\n","import { UIElements, Message } from '@/types';\nimport { UI_CONFIG } from '@/utils/constants';\n\nexport class UIController {\n  private typingMessageDiv: HTMLDivElement | null = null;\n\n  constructor(private elements: UIElements) {}\n\n  showConfigScreen(): void {\n    this.elements.configScreen.style.display = 'flex';\n    this.elements.mainApp.classList.remove('active');\n  }\n\n  showMainApp(): void {\n    this.elements.configScreen.style.display = 'none';\n    this.elements.mainApp.classList.add('active');\n  }\n\n  showError(message: string): void {\n    this.elements.configError.textContent = message;\n    this.elements.configError.style.display = 'block';\n    setTimeout(() => {\n      this.elements.configError.style.display = 'none';\n    }, UI_CONFIG.ERROR_DISPLAY_DURATION);\n  }\n\n  showLoading(show: boolean): void {\n    this.elements.loadingOverlay.style.display = show ? 'flex' : 'none';\n  }\n\n  toggleSettingsMenu(): void {\n    this.elements.settingsMenu.classList.toggle('active');\n  }\n\n  hideSettingsMenu(): void {\n    this.elements.settingsMenu.classList.remove('active');\n  }\n\n  clearMessages(): void {\n    this.elements.chatContainer.innerHTML = '';\n    this.elements.chatContainer.appendChild(this.elements.emptyState);\n  }\n\n  addMessage(message: Message): void {\n    if (this.elements.emptyState.parentNode) {\n      this.elements.emptyState.remove();\n    }\n\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${message.type}`;\n\n    const bubbleDiv = document.createElement('div');\n    bubbleDiv.className = 'message-bubble';\n    bubbleDiv.textContent = message.content;\n\n    messageDiv.appendChild(bubbleDiv);\n    this.elements.chatContainer.appendChild(messageDiv);\n\n    // Scroll to bottom\n    this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;\n  }\n\n  showTypingIndicator(): void {\n    if (this.elements.emptyState.parentNode) {\n      this.elements.emptyState.remove();\n    }\n\n    this.typingMessageDiv = document.createElement('div');\n    this.typingMessageDiv.className = 'chat-message assistant';\n    this.typingMessageDiv.id = 'typingMessage';\n\n    const bubbleDiv = document.createElement('div');\n    bubbleDiv.className = 'message-bubble typing';\n    bubbleDiv.innerHTML = `\n      <span class=\"typing-dot\"></span>\n      <span class=\"typing-dot\"></span>\n      <span class=\"typing-dot\"></span>\n    `;\n\n    this.typingMessageDiv.appendChild(bubbleDiv);\n    this.elements.chatContainer.appendChild(this.typingMessageDiv);\n\n    // Scroll to bottom\n    this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;\n  }\n\n  updateTypingMessage(text: string): void {\n    if (this.typingMessageDiv && text) {\n      const bubble = this.typingMessageDiv.querySelector('.message-bubble');\n      if (bubble) {\n        bubble.className = 'message-bubble';\n        bubble.textContent = text;\n\n        // Scroll to bottom\n        this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;\n      }\n    }\n  }\n\n  hideTypingIndicator(): void {\n    if (this.typingMessageDiv) {\n      this.typingMessageDiv.remove();\n      this.typingMessageDiv = null;\n    }\n  }\n\n  hasTypingIndicator(): boolean {\n    return this.typingMessageDiv !== null;\n  }\n\n  populateConfigForm(siteUrl: string, username: string): void {\n    this.elements.siteUrlInput.value = siteUrl;\n    this.elements.usernameInput.value = username;\n    this.elements.appPasswordInput.value = ''; // Don't populate password for security\n  }\n\n  clearConfigForm(): void {\n    this.elements.siteUrlInput.value = '';\n    this.elements.usernameInput.value = '';\n    this.elements.appPasswordInput.value = '';\n  }\n\n  disableConnectButton(disabled: boolean, text?: string): void {\n    this.elements.connectBtn.disabled = disabled;\n    if (text) {\n      this.elements.connectBtn.textContent = text;\n    }\n  }\n}\n","import { AppStatus } from '@/types';\nimport { STATUS_MESSAGES } from '@/utils/constants';\n\nexport interface MicButtonCallbacks {\n  onStartRecording: () => void;\n  onStopRecording: () => void;\n  onInterruptTts: () => void;\n  onPressAndHoldStart?: () => void;\n  onPressAndHoldEnd?: () => void;\n}\n\nexport class MicButtonController {\n  private currentState: AppStatus = 'disconnected';\n  private callbacks: MicButtonCallbacks;\n  private buttonElement: HTMLButtonElement;\n  private statusElement: HTMLElement;\n  private pressTimer: number | null = null;\n  private isPressAndHold: boolean = false;\n  private pressStartTime: number = 0;\n  private readonly PRESS_HOLD_DELAY = 300; // milliseconds to detect press-and-hold\n  private readonly MIN_CLICK_TIME = 50; // minimum time to consider it a click\n\n  constructor(\n    buttonElement: HTMLButtonElement,\n    statusElement: HTMLElement,\n    callbacks: MicButtonCallbacks\n  ) {\n    this.buttonElement = buttonElement;\n    this.statusElement = statusElement;\n    this.callbacks = callbacks;\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Click event for simple clicks\n    this.buttonElement.addEventListener('click', () => {\n      // Only handle click if it's not from a press-and-hold\n      if (!this.isPressAndHold && this.pressStartTime === 0) {\n        this.handleClick();\n      }\n    });\n\n    // Mouse events\n    this.buttonElement.addEventListener('mousedown', (e) => this.handlePressStart(e));\n    this.buttonElement.addEventListener('mouseup', (e) => this.handlePressEnd(e));\n    this.buttonElement.addEventListener('mouseleave', (e) => this.handlePressCancel(e));\n\n    // Touch events\n    this.buttonElement.addEventListener('touchstart', (e) => this.handlePressStart(e), {\n      passive: false,\n    });\n    this.buttonElement.addEventListener('touchend', (e) => this.handlePressEnd(e), {\n      passive: false,\n    });\n    this.buttonElement.addEventListener('touchcancel', (e) => this.handlePressCancel(e));\n  }\n\n  private handlePressStart(e: Event): void {\n    console.log('[MicButton] Press start event:', e.type, 'Current state:', this.currentState);\n    \n    // Only prevent default for touch events to avoid scroll\n    if (e.type === 'touchstart') {\n      e.preventDefault();\n    }\n\n    this.pressStartTime = Date.now();\n    this.isPressAndHold = false;\n\n    // Only start press-and-hold timer in recording state\n    if (this.currentState === 'recording') {\n      console.log('[MicButton] Starting press-and-hold timer (300ms)');\n      // Start timer for press-and-hold detection\n      this.pressTimer = window.setTimeout(() => {\n        this.isPressAndHold = true;\n        console.log('[MicButton] Press-and-hold ACTIVATED');\n        \n        // Add visual feedback\n        this.buttonElement.classList.add('press-and-hold');\n        \n        if (this.callbacks.onPressAndHoldStart) {\n          console.log('[MicButton] Calling onPressAndHoldStart callback');\n          this.callbacks.onPressAndHoldStart();\n        }\n      }, this.PRESS_HOLD_DELAY);\n    } else {\n      console.log('[MicButton] Not in recording state, skipping press-and-hold');\n    }\n  }\n\n  private handlePressEnd(e: Event): void {\n    const pressDuration = Date.now() - this.pressStartTime;\n    console.log('[MicButton] Press end event:', e.type, 'Duration:', pressDuration, 'ms', 'isPressAndHold:', this.isPressAndHold);\n    \n    if (e.type === 'touchend') {\n      e.preventDefault();\n    }\n\n    // Clear the timer\n    if (this.pressTimer) {\n      clearTimeout(this.pressTimer);\n      this.pressTimer = null;\n    }\n\n    // If press-and-hold was active, end it\n    if (this.isPressAndHold && this.callbacks.onPressAndHoldEnd) {\n      console.log('[MicButton] Ending press-and-hold, calling onPressAndHoldEnd callback');\n      \n      // Remove visual feedback\n      this.buttonElement.classList.remove('press-and-hold');\n      \n      this.callbacks.onPressAndHoldEnd();\n      // Reset immediately\n      this.isPressAndHold = false;\n    } else if (\n      this.pressStartTime > 0 &&\n      pressDuration >= this.MIN_CLICK_TIME &&\n      pressDuration < this.PRESS_HOLD_DELAY\n    ) {\n      // Normal click: between MIN_CLICK_TIME and PRESS_HOLD_DELAY\n      console.log('[MicButton] Normal click detected, calling handleClick()');\n      this.handleClick();\n    }\n\n    // Reset for next press\n    this.isPressAndHold = false;\n    this.pressStartTime = 0;\n  }\n\n  private handlePressCancel(_e: Event): void {\n    console.log('[MicButton] Press cancelled');\n    \n    // Clear timer and reset state if user moves away\n    if (this.pressTimer) {\n      clearTimeout(this.pressTimer);\n      this.pressTimer = null;\n    }\n\n    if (this.isPressAndHold && this.callbacks.onPressAndHoldEnd) {\n      console.log('[MicButton] Press-and-hold cancelled, calling onPressAndHoldEnd');\n      \n      // Remove visual feedback\n      this.buttonElement.classList.remove('press-and-hold');\n      \n      this.callbacks.onPressAndHoldEnd();\n    }\n\n    this.isPressAndHold = false;\n    this.pressStartTime = 0;\n  }\n\n  handleClick(): void {\n    switch (this.currentState) {\n      case 'disconnected':\n      case 'error':\n        this.callbacks.onStartRecording();\n        break;\n\n      case 'speaking':\n        this.callbacks.onInterruptTts();\n        break;\n\n      case 'recording':\n      case 'processing':\n      case 'tool_wait':\n      case 'idle':\n        this.callbacks.onStopRecording();\n        break;\n\n      case 'connecting':\n        // Do nothing while connecting\n        break;\n\n      default:\n        console.warn('Unknown mic button state:', this.currentState);\n    }\n  }\n\n  setState(newState: AppStatus, options: { message?: string } = {}): void {\n    console.log(`Mic button: ${this.currentState} ‚Üí ${newState}`);\n    this.currentState = newState;\n    this.updateUI(newState, options);\n  }\n\n  private updateUI(state: AppStatus, options: { message?: string } = {}): void {\n    this.buttonElement.className = 'mic-button';\n    this.buttonElement.innerHTML = '';\n    this.buttonElement.disabled = false;\n\n    switch (state) {\n      case 'disconnected':\n        this.statusElement.textContent = STATUS_MESSAGES.disconnected;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.innerHTML = this.getMicIcon();\n        break;\n\n      case 'connecting':\n        this.statusElement.textContent = STATUS_MESSAGES.connecting;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.innerHTML = '<div class=\"spinner\"></div>';\n        this.buttonElement.disabled = true;\n        break;\n\n      case 'recording':\n        this.statusElement.textContent = STATUS_MESSAGES.recording;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.classList.add('recording');\n        this.buttonElement.innerHTML = this.getSoundWaveIcon();\n        break;\n\n      case 'processing':\n        this.statusElement.textContent = STATUS_MESSAGES.processing;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.innerHTML = '<div class=\"spinner\"></div>';\n        break;\n\n      case 'speaking':\n        this.statusElement.textContent = STATUS_MESSAGES.speaking_interruptible;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.disabled = false;\n        this.buttonElement.innerHTML = this.getStopIcon();\n        break;\n\n      case 'tool_wait':\n        this.statusElement.textContent = STATUS_MESSAGES.tool_wait;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.innerHTML = '<div class=\"spinner\"></div>';\n        break;\n\n      case 'idle':\n        this.statusElement.textContent = STATUS_MESSAGES.idle;\n        this.statusElement.className = 'status-text';\n        this.buttonElement.innerHTML = this.getStopIcon();\n        break;\n\n      case 'error':\n        this.statusElement.textContent = options.message || STATUS_MESSAGES.error;\n        this.statusElement.className = 'status-text error';\n        this.buttonElement.innerHTML = this.getMicIcon();\n        break;\n    }\n  }\n\n  private getMicIcon(): string {\n    return `\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\"/>\n        <path d=\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\"/>\n      </svg>\n    `;\n  }\n\n  private getStopIcon(): string {\n    return `\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\"/>\n      </svg>\n    `;\n  }\n\n  private getSoundWaveIcon(): string {\n    return `\n      <div class=\"sound-wave\">\n        <span class=\"sound-bar\"></span>\n        <span class=\"sound-bar\"></span>\n        <span class=\"sound-bar\"></span>\n        <span class=\"sound-bar\"></span>\n        <span class=\"sound-bar\"></span>\n      </div>\n    `;\n  }\n}\n","import { UIElements, AppState } from '@/types';\nimport { StateManager } from '@/services/StateManager';\nimport { ApiService } from '@/services/ApiService';\nimport { SessionManager } from '@/services/SessionManager';\nimport { AudioService } from '@/services/AudioService';\nimport { UIController } from './UIController';\nimport { MicButtonController } from './MicButtonController';\nimport { ERROR_MESSAGES, STORAGE_KEYS, UI_TEXT } from '@/utils/constants';\n\nexport class App {\n  private uiController: UIController;\n  private micController: MicButtonController;\n  private sessionManager: SessionManager | null = null;\n  // @ts-expect-error - Used in handleConfigSubmit\n  private apiService: ApiService | null = null;\n  private audioService: AudioService | null = null;\n  private lastMessageCount = 0;\n\n  constructor(\n    private elements: UIElements,\n    private stateManager: StateManager\n  ) {\n    this.uiController = new UIController(elements);\n    this.micController = new MicButtonController(elements.micButton, elements.statusText, {\n      onStartRecording: () => this.startRecordingSession(),\n      onStopRecording: () => this.stopRecordingSession(),\n      onInterruptTts: () => this.interruptTts(),\n      onPressAndHoldStart: () => this.handlePressAndHoldStart(),\n      onPressAndHoldEnd: () => this.handlePressAndHoldEnd(),\n    });\n  }\n\n  async init(): Promise<void> {\n    // Set up event listeners first\n    this.setupEventListeners();\n\n    // Subscribe to state changes\n    this.stateManager.subscribe((state) => this.onStateChange(state));\n\n    // Check if we have saved credentials\n    const state = this.stateManager.getState();\n    if (state.siteUrl && this.generateBearerToken()) {\n      this.elements.siteUrlInput.value = state.siteUrl;\n      this.elements.usernameInput.value = state.username;\n\n      // Just show the main app without testing connection\n      // Services will be initialized on first mic button click\n      this.uiController.showMainApp();\n    } else {\n      this.uiController.showConfigScreen();\n    }\n  }\n\n  private setupEventListeners(): void {\n    // Config form submission\n    this.elements.configForm.addEventListener('submit', (e) => this.handleConfigSubmit(e));\n\n    // Settings menu\n    this.elements.settingsBtn.addEventListener('click', (e) => {\n      e.stopPropagation();\n      this.uiController.toggleSettingsMenu();\n    });\n\n    // Change configuration\n    this.elements.changeConfigBtn.addEventListener('click', () => {\n      this.uiController.hideSettingsMenu();\n      this.uiController.showConfigScreen();\n      this.uiController.populateConfigForm(\n        this.stateManager.getState().siteUrl,\n        this.stateManager.getState().username\n      );\n    });\n\n    // Logout\n    this.elements.logoutBtn.addEventListener('click', () => this.handleLogout());\n\n    // Unlock mobile audio on first mic button click\n    this.elements.micButton.addEventListener(\n      'click',\n      () => {\n        if (this.audioService) {\n          this.audioService.unlockMobileAudio(this.elements.remoteAudio);\n        }\n      },\n      { once: true }\n    );\n\n    // Close settings menu when clicking outside\n    document.addEventListener('click', (e) => {\n      if (\n        !this.elements.settingsBtn.contains(e.target as Node) &&\n        !this.elements.settingsMenu.contains(e.target as Node)\n      ) {\n        this.uiController.hideSettingsMenu();\n      }\n    });\n  }\n\n  private onStateChange(state: AppState): void {\n    // Update mic button state\n    this.micController.setState(state.status);\n\n    // Update UI based on state changes\n    if (state.currentTranscript) {\n      if (!this.uiController.hasTypingIndicator()) {\n        this.uiController.showTypingIndicator();\n      }\n      this.uiController.updateTypingMessage(state.currentTranscript);\n    } else {\n      // Hide typing indicator when transcript is cleared\n      this.uiController.hideTypingIndicator();\n    }\n\n    // Handle messages\n    if (state.messages.length !== this.lastMessageCount) {\n      if (state.messages.length === 0) {\n        // Messages were cleared\n        this.uiController.clearMessages();\n        this.lastMessageCount = 0;\n      } else if (state.messages.length > this.lastMessageCount) {\n        // New messages were added\n        const newMessages = state.messages.slice(this.lastMessageCount);\n        newMessages.forEach((msg) => this.uiController.addMessage(msg));\n        this.lastMessageCount = state.messages.length;\n      } else {\n        // Messages were removed (shouldn't happen normally)\n        // Rebuild the entire message list\n        this.uiController.clearMessages();\n        state.messages.forEach((msg) => this.uiController.addMessage(msg));\n        this.lastMessageCount = state.messages.length;\n      }\n    }\n  }\n\n  private generateBearerToken(): boolean {\n    const storedPassword = localStorage.getItem(STORAGE_KEYS.APP_PASSWORD);\n    const state = this.stateManager.getState();\n\n    if (state.username && storedPassword) {\n      const bearerToken = ApiService.generateBearerToken(state.username, storedPassword);\n      this.stateManager.setState({ bearerToken });\n      return true;\n    }\n    return false;\n  }\n\n  private async handleConfigSubmit(e: Event): Promise<void> {\n    e.preventDefault();\n\n    const url = this.elements.siteUrlInput.value.trim();\n    const username = this.elements.usernameInput.value.trim();\n    const appPassword = this.elements.appPasswordInput.value.trim();\n\n    if (!url || !username || !appPassword) return;\n\n    // Validate URL\n    try {\n      const validUrl = new URL(url);\n      if (!validUrl.protocol.startsWith('http')) {\n        throw new Error(ERROR_MESSAGES.URL_MUST_START_WITH_HTTP);\n      }\n    } catch (error) {\n      this.uiController.showError(ERROR_MESSAGES.INVALID_URL);\n      return;\n    }\n\n    // Generate bearer token\n    const bearerToken = ApiService.generateBearerToken(username, appPassword);\n\n    // Test connection\n    this.uiController.disableConnectButton(true, UI_TEXT.CONNECTING_BUTTON);\n\n    try {\n      const apiService = new ApiService(url, bearerToken);\n\n      // Fetch translations first (non-blocking)\n      apiService.fetchTranslations().catch(console.warn);\n\n      await apiService.testConnection();\n\n      // Save configuration\n      const cleanUrl = url.replace(/\\/$/, ''); // Remove trailing slash\n      this.stateManager.setSiteConfig(cleanUrl, username, bearerToken);\n      localStorage.setItem(STORAGE_KEYS.APP_PASSWORD, appPassword);\n\n      // Initialize services\n      await this.initializeServices(cleanUrl, bearerToken);\n\n      this.uiController.showMainApp();\n    } catch (error) {\n      this.uiController.showError((error as Error).message || ERROR_MESSAGES.CONNECTION_GENERIC);\n    } finally {\n      this.uiController.disableConnectButton(false, UI_TEXT.CONNECT_BUTTON);\n    }\n  }\n\n  private handleLogout(): void {\n    if (confirm(UI_TEXT.DISCONNECT_CONFIRM)) {\n      this.stateManager.clearSiteConfig();\n      this.uiController.clearConfigForm();\n      this.uiController.hideSettingsMenu();\n      this.uiController.showConfigScreen();\n      this.stopRecordingSession();\n    }\n  }\n\n  private async startRecordingSession(): Promise<void> {\n    // Initialize services if not already done\n    if (!this.sessionManager) {\n      const state = this.stateManager.getState();\n      if (!state.siteUrl || !state.bearerToken) {\n        this.uiController.showError('Credenziali non trovate. Accedi nuovamente.');\n        this.uiController.showConfigScreen();\n        return;\n      }\n\n      try {\n        this.uiController.showLoading(true);\n        console.log('initializeServices');\n        await this.initializeServices(state.siteUrl, state.bearerToken);\n      } catch (error) {\n        console.error('Failed to initialize services:', error);\n        this.uiController.showLoading(false);\n        this.uiController.showError('Sessione scaduta. Accedi nuovamente.');\n        this.uiController.showConfigScreen();\n        return;\n      }\n    }\n\n    // Show loading while starting session\n    this.uiController.showLoading(true);\n\n    try {\n      await this.sessionManager!.startSession();\n    } catch (error) {\n      console.error('Failed to start session:', error);\n    } finally {\n      this.uiController.showLoading(false);\n    }\n  }\n\n  private stopRecordingSession(): void {\n    if (this.sessionManager) {\n      this.sessionManager.stopSession();\n    }\n    this.uiController.hideTypingIndicator();\n  }\n\n  private interruptTts(): void {\n    if (this.sessionManager) {\n      this.sessionManager.interruptTts();\n    }\n  }\n\n  private handlePressAndHoldStart(): void {\n    console.log(\n      '[App] handlePressAndHoldStart called, sessionManager exists:',\n      !!this.sessionManager\n    );\n    if (this.sessionManager) {\n      this.sessionManager.setVadEnabled(false);\n    } else {\n      console.log('[App] No sessionManager available');\n    }\n  }\n\n  private handlePressAndHoldEnd(): void {\n    console.log(\n      '[App] handlePressAndHoldEnd called, sessionManager exists:',\n      !!this.sessionManager\n    );\n    if (this.sessionManager) {\n      this.sessionManager.setVadEnabled(true);\n    } else {\n      console.log('[App] No sessionManager available');\n    }\n  }\n\n  private async initializeServices(siteUrl: string, bearerToken: string): Promise<void> {\n    const apiService = new ApiService(siteUrl, bearerToken);\n\n    // Fetch translations (non-blocking)\n    apiService.fetchTranslations().catch(console.warn);\n\n    // Only test connection when actually needed\n    // This will throw if credentials are invalid\n    await apiService.testConnection();\n\n    this.apiService = apiService;\n    this.audioService = new AudioService(apiService);\n    this.sessionManager = new SessionManager(\n      this.stateManager,\n      apiService,\n      this.elements.remoteAudio\n    );\n  }\n}\n","import { AppState, AppStatus, Message, ToolCall } from '@/types';\nimport { STORAGE_KEYS } from '@/utils/constants';\n\nexport class StateManager {\n  private state: AppState;\n  private listeners: Array<(state: AppState) => void> = [];\n\n  constructor() {\n    this.state = {\n      siteUrl: localStorage.getItem(STORAGE_KEYS.SITE_URL) || '',\n      username: localStorage.getItem(STORAGE_KEYS.USERNAME) || '',\n      bearerToken: null,\n      sessionToken: null,\n      status: 'disconnected',\n      messages: [],\n      currentTranscript: '',\n      peerConnection: null,\n      dataChannel: null,\n      localStream: null,\n      toolCallQueue: [],\n      currentToolCallId: null,\n      isCustomTtsEnabled: false,\n      sessionModalities: [],\n      isPlayingCustomTts: false,\n    };\n  }\n\n  getState(): AppState {\n    return this.state;\n  }\n\n  setState(updates: Partial<AppState>): void {\n    this.state = { ...this.state, ...updates };\n    this.notifyListeners();\n  }\n\n  updateStatus(status: AppStatus): void {\n    this.setState({ status });\n  }\n\n  addMessage(message: Message): void {\n    this.setState({ messages: [...this.state.messages, message] });\n  }\n\n  clearMessages(): void {\n    this.setState({ messages: [] });\n  }\n\n  setSiteConfig(siteUrl: string, username: string, bearerToken: string): void {\n    this.setState({ siteUrl, username, bearerToken });\n    localStorage.setItem(STORAGE_KEYS.SITE_URL, siteUrl);\n    localStorage.setItem(STORAGE_KEYS.USERNAME, username);\n  }\n\n  clearSiteConfig(): void {\n    this.setState({ siteUrl: '', username: '', bearerToken: null });\n    localStorage.removeItem(STORAGE_KEYS.SITE_URL);\n    localStorage.removeItem(STORAGE_KEYS.USERNAME);\n    localStorage.removeItem(STORAGE_KEYS.APP_PASSWORD);\n  }\n\n  setSessionData(sessionToken: string, modalities: string[]): void {\n    const isCustomTtsEnabled = !modalities.includes('audio');\n    this.setState({ sessionToken, sessionModalities: modalities, isCustomTtsEnabled });\n  }\n\n  updateTranscript(transcript: string): void {\n    this.setState({ currentTranscript: transcript });\n  }\n\n  appendTranscript(delta: string): void {\n    this.setState({ currentTranscript: this.state.currentTranscript + delta });\n  }\n\n  queueToolCall(toolCall: ToolCall): void {\n    this.setState({ toolCallQueue: [...this.state.toolCallQueue, toolCall] });\n  }\n\n  dequeueToolCall(): ToolCall | undefined {\n    const [toolCall, ...rest] = this.state.toolCallQueue;\n    this.setState({ toolCallQueue: rest, currentToolCallId: toolCall?.call_id || null });\n    return toolCall;\n  }\n\n  setPlayingCustomTts(isPlaying: boolean): void {\n    this.setState({ isPlayingCustomTts: isPlaying });\n  }\n\n  subscribe(listener: (state: AppState) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach((listener) => listener(this.state));\n  }\n}\n","import { App } from './components/App';\nimport { StateManager } from './services/StateManager';\nimport { ApiService } from './services/ApiService';\nimport { initializeElements, updateUIWithTranslations } from './utils/dom';\nimport { STORAGE_KEYS } from './utils/constants';\nimport './styles/main.css';\n\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const elements = initializeElements();\n  const stateManager = new StateManager();\n  const app = new App(elements, stateManager);\n\n  // Apply default translations immediately\n  updateUIWithTranslations();\n\n  // Fetch translations if we have a stored site URL\n  const storedSiteUrl = localStorage.getItem(STORAGE_KEYS.SITE_URL);\n  if (storedSiteUrl) {\n    // Create a temporary API service just for fetching translations\n    // No auth needed since the translations endpoint is public\n    const apiService = new ApiService(storedSiteUrl, '');\n    apiService.fetchTranslations().catch(console.warn);\n  }\n\n  try {\n    await app.init();\n  } catch (error) {\n    console.error('Failed to initialize app:', error);\n  }\n});\n"],"names":["API_ENDPOINTS","OPENAI_API","AUDIO_CONFIG","UI_CONFIG","STORAGE_KEYS","defaultTranslations","status","disconnected","connecting","recording","processing","speaking","speaking_interruptible","tool_wait","idle","error","errors","invalid_url","invalid_credentials","access_denied","connection_failed","session_failed","tool_execution_failed","network_error","data_channel_not_open","tts_failed","communication_error","unknown_error","url_must_start_with_http","connection_generic","ui","page_title","config_title","config_subtitle","note_label","note_text","how_to_generate_link","site_url_label","site_url_placeholder","site_url_hint","username_label","username_placeholder","username_hint","app_password_label","app_password_hint","connect_button","connecting_button","office_name","change_config","disconnect","greeting_title","greeting_text","suggestion_1","suggestion_2","suggestion_3","disconnect_confirm","currentTranslations","__spreadValues","STATUS_MESSAGES","Proxy","get","_","prop","ERROR_MESSAGES","key","toLowerCase","UI_TEXT","updateUIWithTranslations","document","title","configTitle","querySelector","textContent","configSubtitle","noteSection","innerHTML","siteUrlLabel","siteUrlInput","getElementById","placeholder","siteUrlHint","_a","parentElement","usernameLabel","usernameInput","usernameHint","_b","appPasswordLabel","appPasswordHint","_c","connectBtn","disabled","officeName","changeConfigSpan","disconnectSpan","greetingTitle","greetingText","suggestions","querySelectorAll","length","statusText","ApiService","constructor","siteUrl","bearerToken","this","testConnection","__async","response","fetch","method","mode","credentials","headers","Authorization","ok","Error","INVALID_CREDENTIALS","CONNECTION_FAILED","userData","json","id","name","ACCESS_DENIED","console","log","jsonError","createSession","body","JSON","stringify","text","SESSION_FAILED","sessionData","client_secret","value","executeTool","request","getTextToSpeech","signal","blob","generateBearerToken","username","appPassword","btoa","fetchTranslations","translations","setTranslations","warn","WebRTCService","peerConnection","dataChannel","localStream","startSession","_0","arguments","sessionToken","model","callbacks","RTCPeerConnection","onTrack","ontrack","getTransceivers","forEach","t","sender","track","kind","params","getParameters","encodings","maxBitrate","setParameters","navigator","mediaDevices","getUserMedia","audio","sampleRate","channelCount","sampleSize","echoCancellation","noiseSuppression","autoGainControl","getTracks","addTrack","createDataChannel","ordered","onDataChannelOpen","onopen","onDataChannelMessage","onmessage","onDataChannelError","onerror","offer","createOffer","setLocalDescription","sdpResponse","sdp","answerSdp","setRemoteDescription","type","sendEvent","event","readyState","send","muteMicrophone","getAudioTracks","enabled","unmuteMicrophone","updateTurnDetection","session","turn_detection","threshold","prefix_padding_ms","silence_duration_ms","closeSession","stop","close","AudioService","apiService","isMobileAudioUnlocked","globalAudioContext","isPlayingCustomTts","currentAudioElement","currentAbortController","unlockMobileAudio","audioElement","window","AudioContext","webkitAudioContext","state","resume","wasMuted","muted","playPromise","play","then","pause","currentTime","catch","err","playCustomTtsAudio","onStart","onEnd","AbortController","audioBlob","size","dataset","objectUrl","URL","revokeObjectURL","srcObject","createObjectURL","src","Promise","resolve","reject","checkInterrupted","onended","intervalId","setInterval","clearInterval","originalResolve","TTS_FAILED","interruptCustomTts","abort","cleanup","isPlayingTts","SessionManager","stateManager","webrtcService","audioService","setState","messages","toolCallQueue","currentToolCallId","setSessionData","modalities","includes","updateStatus","handleServerEvent","handleError","COMMUNICATION_ERROR","streams","e","message","stopSession","getState","updateTranscript","setVadEnabled","data","parse","addMessage","content","transcript","appendTranscript","delta","isCustomTtsEnabled","handleResponseDone","UNKNOWN_ERROR","responseOutput","_d","output","responseText","playCustomTts","outputItem","call_id","queueToolCall","toolCall","dequeueToolCall","processToolCall","setPlayingCustomTts","result","tool_name","sendFunctionResult","TOOL_EXECUTION_FAILED","NETWORK_ERROR","nextToolCall","callId","item","DATA_CHANNEL_NOT_OPEN","interruptTts","UIController","elements","typingMessageDiv","showConfigScreen","configScreen","style","display","mainApp","classList","remove","showMainApp","add","showError","configError","setTimeout","showLoading","show","loadingOverlay","toggleSettingsMenu","settingsMenu","toggle","hideSettingsMenu","clearMessages","chatContainer","appendChild","emptyState","parentNode","messageDiv","createElement","className","bubbleDiv","scrollTop","scrollHeight","showTypingIndicator","updateTypingMessage","bubble","hideTypingIndicator","hasTypingIndicator","populateConfigForm","appPasswordInput","clearConfigForm","disableConnectButton","MicButtonController","buttonElement","statusElement","currentState","pressTimer","isPressAndHold","pressStartTime","PRESS_HOLD_DELAY","MIN_CLICK_TIME","setupEventListeners","addEventListener","handleClick","handlePressStart","handlePressEnd","handlePressCancel","passive","preventDefault","Date","now","onPressAndHoldStart","pressDuration","clearTimeout","onPressAndHoldEnd","_e","onStartRecording","onInterruptTts","onStopRecording","newState","options","updateUI","getMicIcon","getSoundWaveIcon","getStopIcon","App","sessionManager","lastMessageCount","uiController","micController","micButton","startRecordingSession","stopRecordingSession","handlePressAndHoldStart","handlePressAndHoldEnd","init","subscribe","onStateChange","configForm","handleConfigSubmit","settingsBtn","stopPropagation","changeConfigBtn","logoutBtn","handleLogout","remoteAudio","once","contains","target","currentTranscript","slice","msg","storedPassword","localStorage","getItem","url","trim","protocol","startsWith","URL_MUST_START_WITH_HTTP","INVALID_URL","CONNECTING_BUTTON","cleanUrl","replace","setSiteConfig","setItem","initializeServices","CONNECTION_GENERIC","CONNECT_BUTTON","confirm","DISCONNECT_CONFIRM","clearSiteConfig","StateManager","listeners","sessionModalities","updates","notifyListeners","removeItem","rest","isPlaying","listener","push","filter","l","exports","app","storedSiteUrl"],"mappings":"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"}